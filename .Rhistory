sem_formula
sem_formula[1]
sem_formula[2]
sem_formula[0]
sem_formula[1]
sem_formula[2]
sem_formula[3]
sem_formula[3][0]
sem_formula[3][1]
toString(sem_formula[3])
head(uni_sclae)
head(uni_scale)
reg_all <- uni_scale %>%
group_by(measure, language) %>%
nest() %>%
mutate(model = map(data, lang_model_reg)) %>%
mutate(conf = map(data, lang_ci_reg))
lang_coefs <- reg_all %>%
mutate(coefs = map(model, broom::tidy)) %>%
mutate(ci = map(conf, broom::tidy)) %>%
select(measure, language, coefs, ci) %>%
unnest() %>%
select(-.rownames) %>%
filter(term != "(Intercept)") %>%
rename(predictor = term)
reg_all <- uni_scale %>%
group_by(measure, language) %>%
nest() %>%
mutate(model = map(data, lang_model_reg)) %>%
mutate(conf = map(data, lang_ci_reg))
lang_coefs <- reg_all %>%
mutate(coefs = map(model, broom::tidy)) %>%
mutate(ci = map(conf, broom::tidy)) %>%
select(measure, language, coefs, ci) %>%
unnest() %>%
select(-.rownames) %>%
dplyr::filter(term != "(Intercept)") %>%
rename(predictor = term)
lang_coefs
sem_formula[3]
toString(sem_formula[3])
toString(phono_formula[3])
phono_formula <- as.formula("aoa ~ phono_deg")
all_formula <- as.formula("aoa ~ frequency + length + sem_deg + phono_deg")
toString(phono_formula[3])
toString(sem_formula[3])
toString(all_formula[3])
head(lang_coefs)
head(lang_coefs)
sem_formula <- as.formula("aoa ~ sem_deg")
phono_formula <- as.formula("aoa ~ phono_deg")
all_formula <- as.formula("aoa ~ frequency + length + sem_deg + phono_deg")
#Model
model_reg <- function(data, formula) {
lm(formula, data = data)
}
#CI
ci_reg <- function(data, formula) {
confint(lm(formula, data = data))
}
formulas <- list(sem_formula,  phono_formula, all_formula)
coefs_all <- data.frame()
for (formula in formulas){
reg <- uni_scale %>%
group_by(measure, language) %>%
nest() %>%
mutate(model = map2(data, formula, model_reg)) %>%
mutate(conf = map(data, formula, ci_reg))
coefs_form <- reg %>%
mutate(coefs = map(model, broom::tidy)) %>%
mutate(ci = map(conf, broom::tidy)) %>%
select(measure, language, coefs, ci) %>%
unnest() %>%
select(-.rownames) %>%
dplyr::filter(term != "(Intercept)") %>%
rename(predictor = term) %>%
mutate(formula = toString(formula[3]))
coefs_all <- bind_rows(coefs_all, coefs_form)
}
rep(sem_formula, times = 2)
rep(sem_formula, times = 1)
typeof(sem_formula)
for (formula in formulas){
#Model
model_reg <- function(data) {
lm(formula, data = data)
}
#CI
ci_reg <- function(data) {
confint(lm(formula, data = data))
}
reg <- uni_scale %>%
formula_list =
group_by(measure, language) %>%
nest() %>%
mutate(model = map2(data, model_reg)) %>%
mutate(conf = map(data, ci_reg))
coefs_form <- reg %>%
mutate(coefs = map(model, broom::tidy)) %>%
mutate(ci = map(conf, broom::tidy)) %>%
select(measure, language, coefs, ci) %>%
unnest() %>%
select(-.rownames) %>%
dplyr::filter(term != "(Intercept)") %>%
rename(predictor = term) %>%
mutate(formula = toString(formula[3]))
coefs_all <- bind_rows(coefs_all, coefs_form)
}
sem_formula <- as.formula("aoa ~ sem_deg")
phono_formula <- as.formula("aoa ~ phono_deg")
all_formula <- as.formula("aoa ~ frequency + length + sem_deg + phono_deg")
formulas <- list(sem_formula,  phono_formula, all_formula)
coefs_all <- data.frame()
for (formula in formulas){
#Model
model_reg <- function(data) {
lm(formula, data = data)
}
#CI
ci_reg <- function(data) {
confint(lm(formula, data = data))
}
reg <- uni_scale %>%
group_by(measure, language) %>%
nest() %>%
mutate(model = map2(data, model_reg)) %>%
mutate(conf = map(data, ci_reg))
coefs_form <- reg %>%
mutate(coefs = map(model, broom::tidy)) %>%
mutate(ci = map(conf, broom::tidy)) %>%
select(measure, language, coefs, ci) %>%
unnest() %>%
select(-.rownames) %>%
dplyr::filter(term != "(Intercept)") %>%
rename(predictor = term) %>%
mutate(formula = toString(formula[3]))
coefs_all <- bind_rows(coefs_all, coefs_form)
}
sem_formula <- as.formula("aoa ~ sem_deg")
phono_formula <- as.formula("aoa ~ phono_deg")
all_formula <- as.formula("aoa ~ frequency + length + sem_deg + phono_deg")
formulas <- list(sem_formula,  phono_formula, all_formula)
coefs_all <- data.frame()
for (formula in formulas){
#Model
model_reg <- function(data) {
lm(formula, data = data)
}
#CI
ci_reg <- function(data) {
confint(lm(formula, data = data))
}
reg <- uni_scale %>%
group_by(measure, language) %>%
nest() %>%
mutate(model = map(data, model_reg)) %>%
mutate(conf = map(data, ci_reg))
coefs_form <- reg %>%
mutate(coefs = map(model, broom::tidy)) %>%
mutate(ci = map(conf, broom::tidy)) %>%
select(measure, language, coefs, ci) %>%
unnest() %>%
select(-.rownames) %>%
dplyr::filter(term != "(Intercept)") %>%
rename(predictor = term) %>%
mutate(formula = toString(formula[3]))
coefs_all <- bind_rows(coefs_all, coefs_form)
}
#feather::write_feather(lang_coefs, "saved_data/static_preds.feather")
#lang_coefs <- feather::read_feather("saved_data/static_preds.feather")
head(coefs_all)
coefs_all
View(coefs_all)
toString(formula[3])
ifelse(toString(formula[3])=='frequency + length + sem_deg + phono_deg', 'Combined', 'Individual')
head(coefs_all)
sem_formula <- as.formula("aoa ~ sem_deg")
phono_formula <- as.formula("aoa ~ phono_deg")
all_formula <- as.formula("aoa ~ frequency + length + sem_deg + phono_deg")
formulas <- list(sem_formula,  phono_formula, all_formula)
coefs_all <- data.frame()
for (formula in formulas){
#Model
model_reg <- function(data) {
lm(formula, data = data)
}
#CI
ci_reg <- function(data) {
confint(lm(formula, data = data))
}
reg <- uni_scale %>%
group_by(measure, language) %>%
nest() %>%
mutate(model = map(data, model_reg)) %>%
mutate(conf = map(data, ci_reg))
coefs_form <- reg %>%
mutate(coefs = map(model, broom::tidy)) %>%
mutate(ci = map(conf, broom::tidy)) %>%
select(measure, language, coefs, ci) %>%
unnest() %>%
select(-.rownames) %>%
dplyr::filter(term != "(Intercept)") %>%
rename(predictor = term) %>%
mutate(formula = ifelse(toString(formula[3])=='frequency + length + sem_deg + phono_deg', 'Combined', 'Individual'))
coefs_all <- bind_rows(coefs_all, coefs_form)
}
#feather::write_feather(lang_coefs, "saved_data/static_preds.feather")
#lang_coefs <- feather::read_feather("saved_data/static_preds.feather")
head(coefs_all)
sem_formula <- as.formula("aoa ~ sem_deg")
phono_formula <- as.formula("aoa ~ phono_deg")
all_formula <- as.formula("aoa ~ frequency + length + sem_deg + phono_deg")
formulas <- list(sem_formula,  phono_formula, all_formula)
coefs_all <- data.frame()
for (formula in formulas){
#Model
model_reg <- function(data) {
lm(formula, data = data)
}
#CI
ci_reg <- function(data) {
confint(lm(formula, data = data))
}
reg <- uni_scale %>%
group_by(measure, language) %>%
nest() %>%
mutate(model = map(data, model_reg)) %>%
mutate(conf = map(data, ci_reg))
coefs_form <- reg %>%
mutate(coefs = map(model, broom::tidy)) %>%
mutate(ci = map(conf, broom::tidy)) %>%
select(measure, language, coefs, ci) %>%
unnest() %>%
select(-.rownames) %>%
dplyr::filter(term != "(Intercept)") %>%
rename(predictor = term) %>%
mutate(Test = ifelse(toString(formula[3])=='frequency + length + sem_deg + phono_deg', 'Combined', 'Individual'))
coefs_all <- bind_rows(coefs_all, coefs_form)
}
#feather::write_feather(lang_coefs, "saved_data/static_preds.feather")
#lang_coefs <- feather::read_feather("saved_data/static_preds.feather")
head(coefs_all)
plot_reg_prod <- ggplot(subset(coefs_all, measure =="produces"), aes(x = predictor, y = estimate)) +
geom_pointrange(aes(ymin = X2.5.., ymax = X97.5.., y = estimate, col = predictor, linetype=Test),
position = position_dodge(width = .5),
size = 0.5,
fatten = 0.5)+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
facet_wrap(~language, ncol=4)  +
coord_flip() +
guides(colour=FALSE)+
scale_colour_solarized() +
theme_few()+
theme(aspect.ratio = 0.7)
plot_reg_prod
feather::write_feather(coefs_all, "saved_data/static_preds.feather")
coefs_all <- feather::read_feather("saved_data/static_preds.feather")
plot_reg_comp <- ggplot(subset(lang_coefs, measure =="understands"), aes(x = predictor, y = estimate)) +
geom_pointrange(aes(ymin = X2.5.., ymax = X97.5.., y = estimate, col = predictor, linetype=Test),
position = position_dodge(width = .5),
size = 0.5,
fatten = 0.5)+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
facet_wrap(~language, ncol=4)  +
coord_flip() +
guides(colour=FALSE)+
scale_colour_solarized() +
theme_few()+
theme(aspect.ratio = 0.7)
plot_reg_comp
plot_reg_comp <- ggplot(subset(coefs_all, measure =="understands"), aes(x = predictor, y = estimate)) +
geom_pointrange(aes(ymin = X2.5.., ymax = X97.5.., y = estimate, col = predictor, linetype=Test),
position = position_dodge(width = .5),
size = 0.5,
fatten = 0.5)+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
facet_wrap(~language, ncol=4)  +
coord_flip() +
guides(colour=FALSE)+
scale_colour_solarized() +
theme_few()+
theme(aspect.ratio = 0.7)
plot_reg_comp
sem_formula <- as.formula("aoa ~ sem_deg + (1 | language)")
sem_formula
sem_formula[3]
toString(sem_formula[3])
sem_formula <- as.formula("aoa ~ sem_deg + (1 | language)")
phono_formula <- as.formula("aoa ~ phono_deg + (1 | language)")
all_formula <- as.formula("aoa ~ frequency + length + sem_deg + phono_deg + + (1 | language)")
formulas <- list(sem_formula,  phono_formula, all_formula)
coefs_agg_all <- data.frame()
for (formula in formulas){
reg_agg_prod <- lmer(aoa ~ formula,  data= subset(uni_scale, measure == "produces"))
reg_agg_comp <- lmer(aoa ~ formula,  data= subset(uni_scale, measure == "understands"))
#Extract coeficnet and confidence intervals
coef_agg_fun <- function (model, meas_name) {
conf <- confint(model, method ="Wald")
conf <- data.frame(predictor = row.names(conf), conf) %>%
filter(!(predictor %in% c('.sig01', '.sigma', '(Intercept)')))
coef <- coef(summary(model))
data.frame(predictor = row.names(coef), coef) %>%
filter(predictor !='(Intercept)') %>%
left_join(conf) %>%
mutate(measure = meas_name)
}
coef_agg_prod <- coef_agg_fun(reg_agg_prod, 'production')
coef_agg_comp <- coef_agg_fun(reg_agg_comp, 'comprehension')
coef_agg_form <- coef_agg_prod %>%
bind_rows(coef_agg_comp) %>%
mutate(Test = ifelse(toString(formula[3])=='frequency + length + sem_deg + phono_deg + (1 | language)', 'Combined', 'Individual'))
coefs_agg_all <- bind_rows(coefs_agg_all, coef_agg_form)
}
sem_formula <- as.formula("aoa ~ sem_deg + (1 | language)")
reg_agg_prod <- lmer(aoa ~ sem_formula,  data= subset(uni_scale, measure == "produces"))
reg_agg_prod <- lmer(formula,  data= subset(uni_scale, measure == "produces"))
sem_formula <- as.formula("aoa ~ sem_deg + (1 | language)")
phono_formula <- as.formula("aoa ~ phono_deg + (1 | language)")
all_formula <- as.formula("aoa ~ frequency + length + sem_deg + phono_deg + + (1 | language)")
formulas <- list(sem_formula,  phono_formula, all_formula)
coefs_agg_all <- data.frame()
for (formula in formulas){
reg_agg_prod <- lmer(formula,  data= subset(uni_scale, measure == "produces"))
reg_agg_comp <- lmer(formula,  data= subset(uni_scale, measure == "understands"))
#Extract coeficnet and confidence intervals
coef_agg_fun <- function (model, meas_name) {
conf <- confint(model, method ="Wald")
conf <- data.frame(predictor = row.names(conf), conf) %>%
filter(!(predictor %in% c('.sig01', '.sigma', '(Intercept)')))
coef <- coef(summary(model))
data.frame(predictor = row.names(coef), coef) %>%
filter(predictor !='(Intercept)') %>%
left_join(conf) %>%
mutate(measure = meas_name)
}
coef_agg_prod <- coef_agg_fun(reg_agg_prod, 'production')
coef_agg_comp <- coef_agg_fun(reg_agg_comp, 'comprehension')
coef_agg_form <- coef_agg_prod %>%
bind_rows(coef_agg_comp) %>%
mutate(Test = ifelse(toString(formula[3])=='frequency + length + sem_deg + phono_deg + (1 | language)', 'Combined', 'Individual'))
coefs_agg_all <- bind_rows(coefs_agg_all, coef_agg_form)
}
#Regression with all predictors and language as a random effect
#reg_agg <- lme(aoa ~ frequency + length + sem_deg + phono_deg , random=~1|language,  data= uni_scale)
sem_formula <- as.formula("aoa ~ sem_deg + (1 | language)")
phono_formula <- as.formula("aoa ~ phono_deg + (1 | language)")
all_formula <- as.formula("aoa ~ frequency + length + sem_deg + phono_deg + + (1 | language)")
formulas <- list(sem_formula,  phono_formula, all_formula)
coefs_agg_all <- data.frame()
for (formula in formulas){
reg_agg_prod <- lmer(formula,  data= subset(uni_scale, measure == "produces"))
reg_agg_comp <- lmer(formula,  data= subset(uni_scale, measure == "understands"))
#Extract coeficnet and confidence intervals
coef_agg_fun <- function (model, meas_name) {
conf <- confint(model, method ="Wald")
conf <- data.frame(predictor = row.names(conf), conf) %>%
dplyr::filter(!(predictor %in% c('.sig01', '.sigma', '(Intercept)')))
coef <- coef(summary(model))
data.frame(predictor = row.names(coef), coef) %>%
dplyr::filter(predictor !='(Intercept)') %>%
left_join(conf) %>%
mutate(measure = meas_name)
}
coef_agg_prod <- coef_agg_fun(reg_agg_prod, 'production')
coef_agg_comp <- coef_agg_fun(reg_agg_comp, 'comprehension')
coef_agg_form <- coef_agg_prod %>%
bind_rows(coef_agg_comp) %>%
mutate(Test = ifelse(toString(formula[3])=='frequency + length + sem_deg + phono_deg + (1 | language)', 'Combined', 'Individual'))
coefs_agg_all <- bind_rows(coefs_agg_all, coef_agg_form)
}
coefs_agg_all
plot_agg <- ggplot(coefs_agg_all, aes(x = predictor, y = Estimate)) +
geom_pointrange(aes(ymin = X2.5.., ymax = X97.5.., y = Estimate, col = predictor, linetype=Test),
position = position_dodge(width = .5),
size = 0.5,
fatten = 0.5)+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
facet_wrap(~measure)  +
coord_flip() +
guides(colour=FALSE)+
scale_colour_solarized() +
theme_few()+
theme(aspect.ratio = 0.7)
plot_agg
head(coefs_agg_all)
coefs_agg_all
toString(formula_sem[3])
toString(sem_formula[3])
toString(phono_formula[3])
toString(all_formula[3])
all_formula <- as.formula("aoa ~ frequency + length + sem_deg + phono_deg + (1 | language)")
toString(all_formula[3])
#Regression with all predictors and language as a random effect
#reg_agg <- lme(aoa ~ frequency + length + sem_deg + phono_deg , random=~1|language,  data= uni_scale)
sem_formula <- as.formula("aoa ~ sem_deg + (1 | language)")
phono_formula <- as.formula("aoa ~ phono_deg + (1 | language)")
all_formula <- as.formula("aoa ~ frequency + length + sem_deg + phono_deg + (1 | language)")
formulas <- list(sem_formula,  phono_formula, all_formula)
coefs_agg_all <- data.frame()
for (formula in formulas){
reg_agg_prod <- lmer(formula,  data= subset(uni_scale, measure == "produces"))
reg_agg_comp <- lmer(formula,  data= subset(uni_scale, measure == "understands"))
#Extract coeficnet and confidence intervals
coef_agg_fun <- function (model, meas_name) {
conf <- confint(model, method ="Wald")
conf <- data.frame(predictor = row.names(conf), conf) %>%
dplyr::filter(!(predictor %in% c('.sig01', '.sigma', '(Intercept)')))
coef <- coef(summary(model))
data.frame(predictor = row.names(coef), coef) %>%
dplyr::filter(predictor !='(Intercept)') %>%
left_join(conf) %>%
mutate(measure = meas_name)
}
coef_agg_prod <- coef_agg_fun(reg_agg_prod, 'production')
coef_agg_comp <- coef_agg_fun(reg_agg_comp, 'comprehension')
coef_agg_form <- coef_agg_prod %>%
bind_rows(coef_agg_comp) %>%
mutate(Test = ifelse(toString(formula[3])=='frequency + length + sem_deg + phono_deg + (1 | language)', 'Combined', 'Individual'))
coefs_agg_all <- bind_rows(coefs_agg_all, coef_agg_form)
}
#feather::write_feather(coef_agg_all, "saved_data/static_preds_all.feather")
#coef_agg_all <- feather::read_feather("saved_data/static_preds_all.feather")
plot_agg <- ggplot(coefs_agg_all, aes(x = predictor, y = Estimate)) +
geom_pointrange(aes(ymin = X2.5.., ymax = X97.5.., y = Estimate, col = predictor, linetype=Test),
position = position_dodge(width = .5),
size = 0.5,
fatten = 0.5)+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
facet_wrap(~measure)  +
coord_flip() +
guides(colour=FALSE)+
scale_colour_solarized() +
theme_few()+
theme(aspect.ratio = 0.7)
plot_agg
feather::write_feather(coefs_agg_all, "saved_data/static_preds_all.feather")
coefs_agg_all <- feather::read_feather("saved_data/static_preds_all.feather")
static_preds <- feather::read_feather("../saved_data/static_preds.feather")
plot_static_preds_prod <- ggplot(subset(coefs_all, measure =="produces"), aes(x = predictor, y = estimate)) +
geom_pointrange(aes(ymin = X2.5.., ymax = X97.5.., y = estimate, col = predictor, linetype=Test),
position = position_dodge(width = .5),
size = 0.5,
fatten = 0.5)+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
facet_wrap(~language, ncol=4)  +
coord_flip() +
guides(colour=FALSE)+
scale_colour_solarized() +
theme_few()+
theme(aspect.ratio = 0.7)
plot_static_preds_comp <- ggplot(subset(coefs_all, measure =="understands"), aes(x = predictor, y = estimate)) +
geom_pointrange(aes(ymin = X2.5.., ymax = X97.5.., y = estimate, col = predictor, linetype=Test),
position = position_dodge(width = .5),
size = 0.5,
fatten = 0.5)+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
facet_wrap(~language, ncol=4)  +
coord_flip() +
guides(colour=FALSE)+
scale_colour_solarized() +
theme_few()+
theme(aspect.ratio = 0.7)
plot_grid(plot_static_preds_prod , NULL, plot_static_preds_comp , labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
static_preds <- feather::read_feather("../saved_data/static_preds.feather")
head(static_preds)
distinct(static_preds, Test)
ggplot(subset(static_preds, measure =="produces"), aes(x = predictor, y = estimate)) +
geom_pointrange(aes(ymin = X2.5.., ymax = X97.5.., y = estimate, col = predictor, linetype=Test),
position = position_dodge(width = .5),
size = 0.5,
fatten = 0.5)+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
facet_wrap(~language, ncol=5)  +
coord_flip() +
guides(colour=FALSE)+
scale_colour_solarized() +
theme_few()+
theme(aspect.ratio = 0.7)
ggplot(subset(static_preds, measure =="understands"), aes(x = predictor, y = estimate)) +
geom_pointrange(aes(ymin = X2.5.., ymax = X97.5.., y = estimate, col = predictor, linetype=Test),
position = position_dodge(width = .5),
size = 0.5,
fatten = 0.5)+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
facet_wrap(~language, ncol=5)  +
coord_flip() +
guides(colour=FALSE)+
scale_colour_solarized() +
theme_few()+
theme(aspect.ratio = 0.7)
library(cowplot)
install.packages('cowplot')
library(cowplot)
plot_grid(plot_static_preds_prod , NULL, plot_static_preds_comp , labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
#plot_static_preds_prod
static_preds_all <- feather::read_feather("../saved_data/static_preds_all.feather")
ggplot(coefs_agg_all, aes(x = predictor, y = Estimate)) +
geom_pointrange(aes(ymin = X2.5.., ymax = X97.5.., y = Estimate, col = predictor, linetype=Test),
position = position_dodge(width = .5),
size = 0.5,
fatten = 0.5)+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
facet_wrap(~measure)  +
coord_flip() +
guides(colour=FALSE)+
scale_colour_solarized() +
theme_few()+
theme(aspect.ratio = 0.7)
unilemmas
Version
version
unilemmas
