samples = 1000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model %>%
mutate(measure = meas,
language = lang,
model_name = model_name[i])
}
return(bind_rows(posteriors_lang))
}
#Split by measure and language
data_growth_by_meas_lang <- data_growth_pred %>%
split(paste(.$measure, .$language))
posterior <- map(data_growth_by_meas_lang, posterior_fun) %>%
bind_rows()
#feather::write_feather(posterior, "saved_data/posterior_as_ws.feather")
#posterior <- feather::read_feather("saved_data/posterior.feather")
#data_growth_meas_lang <- data_growth_by_meas_lang[[1]]
#posterior_fun(data_test)
feather::write_feather(posterior, "saved_data/posterior_as_ws.feather"
feather::write_feather(posterior, "saved_data/posterior_as_ws.feather")
library(broom)
library(purrr)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(wordbankr)
library(stringr)
library(feather)
library(lme4)
library(boot)
library(langcog)
library(ggthemes)
library(nlme)
library(rwebppl)
library(jsonlite)
library(Hmisc)
library(poweRlaw)
library(HDInterval)
library(kableExtra)
#data_growth_net <- feather::read_feather("saved_data/data_growth_net.feather")
data_growth_net_as_ws <- feather::read_feather("../asNet_local/saved_data/data_growth_net_AS_WS.feather")
#Filtering
data_growth_pred <- data_growth_net_as_ws %>%
filter(!is.na(uni_lemma)) %>% #use only words with english translation
filter(!is.na(PAC_assoc)) %>% # keep unilemma which intersect with free association data
filter(!is.na(PAC_phono_t2)) # In case a word is not transcribed phonologically (there should not be any)
# replace NA in PAT with O (NA is when the utility cannot be computed, e.g., a candidate word is not linked to any previousely learned word, as opposed to being linked to a previously learned word with a degree=0)
data_growth_pred$PAT_assoc[is.na(data_growth_pred$PAT_assoc)] <- 0
data_growth_pred$PAT_phono_t2[is.na(data_growth_pred$PAT_phono_t2)] <- 0
#Scale predictors
data_growth_pred$language <- plyr::mapvalues(data_growth_pred$language,
from = c("Croatian","Danish","English (American)", "French (Quebecois)", "Italian", "Norwegian", "Russian", "Spanish (Mexican)", "Swedish", "Turkish"),
to = c("Croatian","Danish","English", "French", "Italian", "Norwegian", "Russian", "Spanish", "Swedish", "Turkish"))
data_growth_pred <- data_growth_pred %>%
group_by(measure, language) %>%
mutate_at(c('PAC_assoc', 'PAT_assoc', 'PAC_phono_t2', 'PAT_phono_t2'), funs(as.numeric(scale(.)))) %>%
select(-definition) #removing defintions because they cause JSon parser to fail in rWebppl (especially the (') in French)
#data_growth_pred_as <- feather::read_feather("../asNet_local/saved_data/data_growth_pred_wg_as_test")
#Define the models
#Load probabilsitic models
source(paste(getwd(),"/models/all_models.r",sep = ""), chdir = T)
#Isolateed predictors
model_semPAT <-  paste(helper, sem_PAT, optimize, sep = '\n')
model_semPAC <-  paste(helper, sem_PAC, optimize, sep = '\n')
model_phonoPAT <-  paste(helper, phono_PAT, optimize, sep = '\n')
model_phonoPAC <-  paste(helper, phono_PAC, optimize, sep = '\n')
#Combined predictors
model_semPAC_phonoPAC_semPAT_phonoPAT <-  paste(helper, semPAC_phonoPAC_semPAT_phonoPAT, optimize, sep = '\n')
#Make a list of theses models
model_list = list(model_semPAT, model_semPAC, model_phonoPAT, model_phonoPAC,
model_semPAC_phonoPAC_semPAT_phonoPAT
)
model_name=c('semPAT', 'semPAC', 'phonoPAT', 'phonoPAC',
'model_semPAC_phonoPAC_semPAT_phonoPAT')
#Function that computes the posterior
posterior_fun <- function(data_growth_meas_lang) {
lang <- unique(data_growth_meas_lang$language)
meas <- unique(data_growth_meas_lang$measure)
posteriors_lang <- vector("list", length = length(model_list))
#for (i in 1:1) {
for (i in 1:length(model_list)) {
posterior_model <- NULL
print(model_name[[i]])
print(meas)
print(lang)
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_growth_meas_lang,
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 1000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model %>%
mutate(measure = meas,
language = lang,
model_name = model_name[i])
}
return(bind_rows(posteriors_lang))
}
#Split by measure and language
data_growth_by_meas_lang <- data_growth_pred %>%
split(paste(.$measure, .$language))
posterior <- map(data_growth_by_meas_lang, posterior_fun) %>%
bind_rows()
#Function that computes the posterior
posterior_fun <- function(data_growth_meas_lang) {
lang <- unique(data_growth_meas_lang$language)
meas <- unique(data_growth_meas_lang$measure)
posteriors_lang <- vector("list", length = length(model_list))
#for (i in 1:1) {
for (i in 1:length(model_list)) {
posterior_model <- NULL
print(model_name[[i]])
print(meas)
print(lang)
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_growth_meas_lang,
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 1000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model %>%
mutate(measure = meas,
language = lang,
model_name = model_name[i])
}
return(bind_rows(posteriors_lang))
}
#Split by measure and language
data_growth_by_meas_lang <- data_growth_pred %>%
split(paste(.$measure, .$language))
posterior <- map(data_growth_by_meas_lang, posterior_fun) %>%
bind_rows()
#Function that computes the posterior
posterior_fun <- function(data_growth_meas_lang) {
lang <- unique(data_growth_meas_lang$language)
meas <- unique(data_growth_meas_lang$measure)
posteriors_lang <- vector("list", length = length(model_list))
#for (i in 1:1) {
for (i in 1:length(model_list)) {
posterior_model <- NULL
print(model_name[[i]])
print(meas)
print(lang)
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_growth_meas_lang,
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 1000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model %>%
mutate(measure = meas,
language = lang,
model_name = model_name[i])
}
return(bind_rows(posteriors_lang))
}
#Split by measure and language
data_growth_by_meas_lang <- data_growth_pred %>%
split(paste(.$measure, .$language))
posterior <- map(data_growth_by_meas_lang, posterior_fun) %>%
bind_rows()
#Function that computes the posterior
posterior_fun <- function(data_growth_meas_lang) {
lang <- unique(data_growth_meas_lang$language)
meas <- unique(data_growth_meas_lang$measure)
posteriors_lang <- vector("list", length = length(model_list))
#for (i in 1:1) {
for (i in 1:length(model_list)) {
posterior_model <- NULL
print(model_name[[i]])
print(meas)
print(lang)
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_growth_meas_lang,
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 1000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model %>%
mutate(measure = meas,
language = lang,
model_name = model_name[i])
}
return(bind_rows(posteriors_lang))
}
#Split by measure and language
data_growth_by_meas_lang <- data_growth_pred %>%
split(paste(.$measure, .$language))
posterior <- map(data_growth_by_meas_lang, posterior_fun) %>%
bind_rows()
#Function that computes the posterior
posterior_fun <- function(data_growth_meas_lang) {
lang <- unique(data_growth_meas_lang$language)
meas <- unique(data_growth_meas_lang$measure)
posteriors_lang <- vector("list", length = length(model_list))
#for (i in 1:1) {
for (i in 1:length(model_list)) {
posterior_model <- NULL
print(model_name[[i]])
print(meas)
print(lang)
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_growth_meas_lang,
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 1000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model %>%
mutate(measure = meas,
language = lang,
model_name = model_name[i])
}
return(bind_rows(posteriors_lang))
}
#Split by measure and language
data_growth_by_meas_lang <- data_growth_pred %>%
split(paste(.$measure, .$language))
posterior <- map(data_growth_by_meas_lang, posterior_fun) %>%
bind_rows()
#Define the models
#Load probabilsitic models
source(paste(getwd(),"/models/all_models.r",sep = ""), chdir = T)
#Isolateed predictors
model_semPAT <-  paste(helper, sem_PAT, optimize, sep = '\n')
model_semPAC <-  paste(helper, sem_PAC, optimize, sep = '\n')
model_phonoPAT <-  paste(helper, phono_PAT, optimize, sep = '\n')
model_phonoPAC <-  paste(helper, phono_PAC, optimize, sep = '\n')
#Combined predictors
model_semPAC_phonoPAC_semPAT_phonoPAT <-  paste(helper, semPAC_phonoPAC_semPAT_phonoPAT, optimize, sep = '\n')
#Make a list of theses models
#model_list = list(model_semPAT, model_semPAC, model_phonoPAT, model_phonoPAC,
#                  model_semPAC_phonoPAC_semPAT_phonoPAT
#                  )
#model_name=c('semPAT', 'semPAC', 'phonoPAT', 'phonoPAC',
#                                        'model_semPAC_phonoPAC_semPAT_phonoPAT')
model_list = list(model_semPAC
)
model_name=c('semPAC')
#Function that computes the posterior
posterior_fun <- function(data_growth_meas_lang) {
lang <- unique(data_growth_meas_lang$language)
meas <- unique(data_growth_meas_lang$measure)
posteriors_lang <- vector("list", length = length(model_list))
#for (i in 1:1) {
for (i in 1:length(model_list)) {
posterior_model <- NULL
print(model_name[[i]])
print(meas)
print(lang)
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_growth_meas_lang,
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 1000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model %>%
mutate(measure = meas,
language = lang,
model_name = model_name[i])
}
return(bind_rows(posteriors_lang))
}
#Split by measure and language
data_growth_by_meas_lang <- data_growth_pred %>%
split(paste(.$measure, .$language))
posterior <- map(data_growth_by_meas_lang, posterior_fun) %>%
bind_rows()
#data_growth_net <- feather::read_feather("saved_data/data_growth_net.feather")
data_growth_net_as_wg <- feather::read_feather("../asNet_local/saved_data/data_growth_net_AS_WG.feather")
#Filtering
data_growth_pred <- data_growth_net_as_wg %>%
filter(!is.na(uni_lemma)) %>% #use only words with english translation
filter(!is.na(PAC_assoc)) %>% # keep unilemma which intersect with free association data
filter(!is.na(PAC_phono_t2)) # In case a word is not transcribed phonologically (there should not be any)
# replace NA in PAT with O (NA is when the utility cannot be computed, e.g., a candidate word is not linked to any previousely learned word, as opposed to being linked to a previously learned word with a degree=0)
data_growth_pred$PAT_assoc[is.na(data_growth_pred$PAT_assoc)] <- 0
data_growth_pred$PAT_phono_t2[is.na(data_growth_pred$PAT_phono_t2)] <- 0
#Scale predictors
data_growth_pred$language <- plyr::mapvalues(data_growth_pred$language,
from = c("Croatian","Danish","English (American)", "French (Quebecois)", "Italian", "Norwegian", "Russian", "Spanish (Mexican)", "Swedish", "Turkish"),
to = c("Croatian","Danish","English", "French", "Italian", "Norwegian", "Russian", "Spanish", "Swedish", "Turkish"))
data_growth_pred <- data_growth_pred %>%
group_by(measure, language) %>%
mutate_at(c('PAC_assoc', 'PAT_assoc', 'PAC_phono_t2', 'PAT_phono_t2'), funs(as.numeric(scale(.)))) %>%
select(-definition) #removing defintions because they cause JSon parser to fail in rWebppl (especially the (') in French)
#data_growth_pred_as <- feather::read_feather("../asNet_local/saved_data/data_growth_pred_wg_as_test")
#Define the models
#Load probabilsitic models
source(paste(getwd(),"/models/all_models.r",sep = ""), chdir = T)
#Isolateed predictors
model_semPAT <-  paste(helper, sem_PAT, optimize, sep = '\n')
model_semPAC <-  paste(helper, sem_PAC, optimize, sep = '\n')
model_phonoPAT <-  paste(helper, phono_PAT, optimize, sep = '\n')
model_phonoPAC <-  paste(helper, phono_PAC, optimize, sep = '\n')
#Combined predictors
model_semPAC_phonoPAC_semPAT_phonoPAT <-  paste(helper, semPAC_phonoPAC_semPAT_phonoPAT, optimize, sep = '\n')
#Make a list of theses models
model_list = list(model_semPAT, model_semPAC, model_phonoPAT, model_phonoPAC,
model_semPAC_phonoPAC_semPAT_phonoPAT
)
model_name=c('semPAT', 'semPAC', 'phonoPAT', 'phonoPAC',
'model_semPAC_phonoPAC_semPAT_phonoPAT')
#Function that computes the posterior
posterior_fun <- function(data_growth_meas_lang) {
lang <- unique(data_growth_meas_lang$language)
meas <- unique(data_growth_meas_lang$measure)
posteriors_lang <- vector("list", length = length(model_list))
#for (i in 1:1) {
for (i in 1:length(model_list)) {
posterior_model <- NULL
print(model_name[[i]])
print(meas)
print(lang)
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_growth_meas_lang,
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 1000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model %>%
mutate(measure = meas,
language = lang,
model_name = model_name[i])
}
return(bind_rows(posteriors_lang))
}
#Split by measure and language
data_growth_by_meas_lang <- data_growth_pred %>%
split(paste(.$measure, .$language))
posterior <- map(data_growth_by_meas_lang, posterior_fun) %>%
bind_rows()
#Function that computes the posterior
posterior_fun <- function(data_growth_meas_lang) {
lang <- unique(data_growth_meas_lang$language)
meas <- unique(data_growth_meas_lang$measure)
posteriors_lang <- vector("list", length = length(model_list))
#for (i in 1:1) {
for (i in 1:length(model_list)) {
posterior_model <- NULL
print(model_name[[i]])
print(meas)
print(lang)
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_growth_meas_lang,
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 1000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model %>%
mutate(measure = meas,
language = lang,
model_name = model_name[i])
}
return(bind_rows(posteriors_lang))
}
#Split by measure and language
data_growth_by_meas_lang <- data_growth_pred %>%
split(paste(.$measure, .$language))
posterior <- map(data_growth_by_meas_lang, posterior_fun) %>%
bind_rows()
#data_growth_net <- feather::read_feather("saved_data/data_growth_net.feather")
data_growth_net_as_ws <- feather::read_feather("../asNet_local/saved_data/data_growth_net_AS_WS.feather")
#Filtering
data_growth_pred <- data_growth_net_as_ws %>%
filter(!is.na(uni_lemma)) %>% #use only words with english translation
filter(!is.na(PAC_assoc)) %>% # keep unilemma which intersect with free association data
filter(!is.na(PAC_phono_t2)) # In case a word is not transcribed phonologically (there should not be any)
# replace NA in PAT with O (NA is when the utility cannot be computed, e.g., a candidate word is not linked to any previousely learned word, as opposed to being linked to a previously learned word with a degree=0)
data_growth_pred$PAT_assoc[is.na(data_growth_pred$PAT_assoc)] <- 0
data_growth_pred$PAT_phono_t2[is.na(data_growth_pred$PAT_phono_t2)] <- 0
#Scale predictors
data_growth_pred$language <- plyr::mapvalues(data_growth_pred$language,
from = c("Croatian","Danish","English (American)", "French (Quebecois)", "Italian", "Norwegian", "Russian", "Spanish (Mexican)", "Swedish", "Turkish"),
to = c("Croatian","Danish","English", "French", "Italian", "Norwegian", "Russian", "Spanish", "Swedish", "Turkish"))
data_growth_pred <- data_growth_pred %>%
group_by(measure, language) %>%
mutate_at(c('PAC_assoc', 'PAT_assoc', 'PAC_phono_t2', 'PAT_phono_t2'), funs(as.numeric(scale(.)))) %>%
select(-definition) #removing defintions because they cause JSon parser to fail in rWebppl (especially the (') in French)
#data_growth_pred_as <- feather::read_feather("../asNet_local/saved_data/data_growth_pred_wg_as_test")
#Define the models
#Load probabilsitic models
source(paste(getwd(),"/models/all_models.r",sep = ""), chdir = T)
#Isolateed predictors
model_semPAT <-  paste(helper, sem_PAT, optimize, sep = '\n')
model_semPAC <-  paste(helper, sem_PAC, optimize, sep = '\n')
model_phonoPAT <-  paste(helper, phono_PAT, optimize, sep = '\n')
model_phonoPAC <-  paste(helper, phono_PAC, optimize, sep = '\n')
#Combined predictors
model_semPAC_phonoPAC_semPAT_phonoPAT <-  paste(helper, semPAC_phonoPAC_semPAT_phonoPAT, optimize, sep = '\n')
#Make a list of theses models
model_list = list(model_semPAT, model_semPAC, model_phonoPAT, model_phonoPAC,
model_semPAC_phonoPAC_semPAT_phonoPAT
)
model_name=c('semPAT', 'semPAC', 'phonoPAT', 'phonoPAC',
'model_semPAC_phonoPAC_semPAT_phonoPAT')
#Function that computes the posterior
posterior_fun <- function(data_growth_meas_lang) {
lang <- unique(data_growth_meas_lang$language)
meas <- unique(data_growth_meas_lang$measure)
posteriors_lang <- vector("list", length = length(model_list))
#for (i in 1:1) {
for (i in 1:length(model_list)) {
posterior_model <- NULL
print(model_name[[i]])
print(meas)
print(lang)
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_growth_meas_lang,
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 1000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model %>%
mutate(measure = meas,
language = lang,
model_name = model_name[i])
}
return(bind_rows(posteriors_lang))
}
#Split by measure and language
data_growth_by_meas_lang <- data_growth_pred %>%
split(paste(.$measure, .$language))
posterior <- map(data_growth_by_meas_lang, posterior_fun) %>%
bind_rows()
#Function that computes the posterior
posterior_fun <- function(data_growth_meas_lang) {
lang <- unique(data_growth_meas_lang$language)
meas <- unique(data_growth_meas_lang$measure)
posteriors_lang <- vector("list", length = length(model_list))
#for (i in 1:1) {
for (i in 1:length(model_list)) {
posterior_model <- NULL
print(model_name[[i]])
print(meas)
print(lang)
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_growth_meas_lang,
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 500,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model %>%
mutate(measure = meas,
language = lang,
model_name = model_name[i])
}
return(bind_rows(posteriors_lang))
}
#Split by measure and language
data_growth_by_meas_lang <- data_growth_pred %>%
split(paste(.$measure, .$language))
posterior <- map(data_growth_by_meas_lang, posterior_fun) %>%
bind_rows()
#feather::write_feather(posterior, "saved_data/posterior_as_ws.feather")
#posterior <- feather::read_feather("saved_data/posterior.feather")
#data_growth_meas_lang <- data_growth_by_meas_lang[[1]]
#posterior_fun(data_test)
feather::write_feather(posterior, "saved_data/posterior_as_ws.feather")
