for (i in 1:length(posteriors_combined)) {
param <- posteriors_combined[[i]] %>%
select(starts_with("value.parameters")) %>%
gather(alpha, value, value.parameters.alpha1:value.parameters.alpha4) %>%
mutate(alpha = gsub("value.parameters.", "", alpha)) %>%
mutate(model_index = i) #%>%
#left_join(model_dict)
parameters_combined <- bind_rows(parameters_combined, param)
}
parameters_combined <- parameters_combined %>%
left_join(model_dict) %>%
rename(model= model_name)
parameters_combined_sum <- parameters_combined %>%
group_by(model, alpha) %>%
summarise(mean = mean(value),
median = median(value),
quantile_lower = quantile(value, c(0.025, 0.975))["2.5%"],
quantile_upper = quantile(value, c(0.025, 0.975))["97.5%"],
hdi_lower = hdi(value)['lower'],
hdi_upper = hdi(value)['upper']
)
post_combined_2 <- parameters_combined_sum %>%
filter(model == "model_semPAC_phonoPAC_semPAT_phonoPAT") %>%
select(-model)
post_combine_2d$alpha <- mapvalues(post_combined_2$alpha,
from = c("alpha1", "alpha2","alpha3","alpha4"),
to = c("semPAC", "phonoPAC", "semPAT", "phonoPAT"))
parameters_combined_sum <- parameters_combined %>%
group_by(model, alpha) %>%
summarise(mean = mean(value),
median = median(value),
quantile_lower = quantile(value, c(0.025, 0.975))["2.5%"],
quantile_upper = quantile(value, c(0.025, 0.975))["97.5%"],
hdi_lower = hdi(value)['lower'],
hdi_upper = hdi(value)['upper']
)
post_combined_2 <- parameters_combined_sum %>%
filter(model == "model_semPAC_phonoPAC_semPAT_phonoPAT") %>%
select(-model)
post_combine_2$alpha <- mapvalues(post_combined_2$alpha,
from = c("alpha1", "alpha2","alpha3","alpha4"),
to = c("semPAC", "phonoPAC", "semPAT", "phonoPAT"))
parameters_combined_sum <- parameters_combined %>%
group_by(model, alpha) %>%
summarise(mean = mean(value),
median = median(value),
quantile_lower = quantile(value, c(0.025, 0.975))["2.5%"],
quantile_upper = quantile(value, c(0.025, 0.975))["97.5%"],
hdi_lower = hdi(value)['lower'],
hdi_upper = hdi(value)['upper']
)
post_combined_2 <- parameters_combined_sum %>%
filter(model == "model_semPAC_phonoPAC_semPAT_phonoPAT") %>%
select(-model)
post_combined_2$alpha <- mapvalues(post_combined_2$alpha,
from = c("alpha1", "alpha2","alpha3","alpha4"),
to = c("semPAC", "phonoPAC", "semPAT", "phonoPAT"))
post_combined_2$alpha <- factor(post_combined_2$alpha, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
post_individual_com <- parameters_sum %>%
filter(model != "model_semPAC_phonoPAC_semPAT_phonoPAT",
alpha == "alpha1")
post_individual_com$model <- factor(post_individual_com$model, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
ggplot(post_individual_com, aes(x = model , y = mean)) +
geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = model))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
ggplot(post_combined_2, aes(x = alpha, y = mean)) +
geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = alpha))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
parameters_combined_sum <- parameters_combined %>%
group_by(model, alpha) %>%
summarise(mean = mean(value),
median = median(value),
quantile_lower = quantile(value, c(0.025, 0.975))["2.5%"],
quantile_upper = quantile(value, c(0.025, 0.975))["97.5%"],
hdi_lower = hdi(value)['lower'],
hdi_upper = hdi(value)['upper']
)
post_combined_2 <- parameters_combined_sum %>%
filter(model == "model_semPAC_phonoPAC_semPAT_phonoPAT") %>%
select(-model)
post_combined_2$alpha <- mapvalues(post_combined_2$alpha,
from = c("alpha1", "alpha2","alpha3","alpha4"),
to = c("semPAC", "phonoPAC", "semPAT", "phonoPAT"))
post_combined_2$alpha <- factor(post_combined_2$alpha, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
post_individual_com <- parameters_combined_sum %>%
filter(model != "model_semPAC_phonoPAC_semPAT_phonoPAT",
alpha == "alpha1")
post_individual_com$model <- factor(post_individual_com$model, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
ggplot(post_individual_com, aes(x = model , y = mean)) +
geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = model))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
#facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
ggplot(post_combined_2, aes(x = alpha, y = mean)) +
geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = alpha))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
#facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
head(post_individual_com)
head(parameters_combined)
ggplot(data=parameters_combined, aes(value)) +
geom_vline(xintercept=0, col='red')+
geom_histogram() +
facet_grid(model  ~ alpha )
head(parameters_combined)
parameters_combined_violin <- parameters_combined %>%
filter(model != "model_semPAC_phonoPAC_semPAT_phonoPAT",
alpha == "alpha1")
parameters_combined_violin$model <- factor(parameters_combined_violin$model, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
ggplot(parameters_combined_violin, aes(x = model , y = mean)) +
#geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = model))+
geom_violin()
parameters_combined_violin <- parameters_combined %>%
filter(model != "model_semPAC_phonoPAC_semPAT_phonoPAT",
alpha == "alpha1")
parameters_combined_violin$model <- factor(parameters_combined_violin$model, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
ggplot(parameters_combined_violin, aes(x = model)) +
#geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = model))+
geom_violin()
head(parameters_combined_violin)
parameters_combined_violin <- parameters_combined %>%
filter(model != "model_semPAC_phonoPAC_semPAT_phonoPAT",
alpha == "alpha1")
parameters_combined_violin$model <- factor(parameters_combined_violin$model, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
ggplot(parameters_combined_violin, aes(model, value)) +
#geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = model))+
geom_violin()+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
theme(aspect.ratio = 0.7)
ggplot(parameters_combined_violin, aes(model, value)) +
#geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = model))+
geom_violin(trim = FALSE)+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
theme(aspect.ratio = 0.7)
post_combined <- parameters_all %>%
filter(model == "model_semPAC_phonoPAC_semPAT_phonoPAT") %>%
select(-model)
post_combined$alpha <- mapvalues(post_combined$alpha,
from = c("alpha1", "alpha2","alpha3","alpha4"),
to = c("semPAC", "phonoPAC", "semPAT", "phonoPAT"))
post_combined$alpha <- factor(post_combined$alpha, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
post_individual <- parameters_all %>%
filter(model != "model_semPAC_phonoPAC_semPAT_phonoPAT",
alpha == "alpha1")
post_individual$model <- factor(post_individual$model, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
ggplot(post_individual, aes(x = model , y = mean)) +
geom_violin()+
#geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = model))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
head(post_individual)
post_combined <- parameters_all %>%
filter(model == "model_semPAC_phonoPAC_semPAT_phonoPAT") %>%
select(-model)
post_combined$alpha <- mapvalues(post_combined$alpha,
from = c("alpha1", "alpha2","alpha3","alpha4"),
to = c("semPAC", "phonoPAC", "semPAT", "phonoPAT"))
post_combined$alpha <- factor(post_combined$alpha, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
post_individual <- parameters_all %>%
filter(model != "model_semPAC_phonoPAC_semPAT_phonoPAT",
alpha == "alpha1")
post_individual$model <- factor(post_individual$model, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
ggplot(post_individual, aes(x = model, y = value)) +
geom_violin()+
#geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = model))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
ggplot(post_combined, aes(x = alpha, y = mean)) +
geom_violin()+
#geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = alpha))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
post_combined <- parameters_all %>%
filter(model == "model_semPAC_phonoPAC_semPAT_phonoPAT") %>%
select(-model)
post_combined$alpha <- mapvalues(post_combined$alpha,
from = c("alpha1", "alpha2","alpha3","alpha4"),
to = c("semPAC", "phonoPAC", "semPAT", "phonoPAT"))
post_combined$alpha <- factor(post_combined$alpha, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
post_individual <- parameters_all %>%
filter(model != "model_semPAC_phonoPAC_semPAT_phonoPAT",
alpha == "alpha1")
post_individual$model <- factor(post_individual$model, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
ggplot(post_individual, aes(x = model, y = value)) +
geom_violin()+
#geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = model))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
ggplot(post_combined, aes(x = alpha, y = value)) +
geom_violin()+
#geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = alpha))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
parameters_combined_sum <- parameters_combined %>%
group_by(model, alpha) %>%
summarise(mean = mean(value),
median = median(value),
quantile_lower = quantile(value, c(0.025, 0.975))["2.5%"],
quantile_upper = quantile(value, c(0.025, 0.975))["97.5%"],
hdi_lower = hdi(value)['lower'],
hdi_upper = hdi(value)['upper']
)
post_combined_2 <- parameters_combined_sum %>%
filter(model == "model_semPAC_phonoPAC_semPAT_phonoPAT") %>%
select(-model)
post_combined_2$alpha <- mapvalues(post_combined_2$alpha,
from = c("alpha1", "alpha2","alpha3","alpha4"),
to = c("semPAC", "phonoPAC", "semPAT", "phonoPAT"))
post_combined_2$alpha <- factor(post_combined_2$alpha, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
post_individual_com <- parameters_combined_sum %>%
filter(model != "model_semPAC_phonoPAC_semPAT_phonoPAT",
alpha == "alpha1")
post_individual_com$model <- factor(post_individual_com$model, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
ggplot(post_individual_com, aes(x = model , y = median)) +
geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = model))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
#facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
ggplot(post_combined_2, aes(x = alpha, y = median)) +
geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = alpha))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
#facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
posteriors_all <- vector("list", length = length(data_scaled))
for (j in 1:length(data_scaled)) {
posteriors_lang <- vector("list", length = length(model_list))
for (i in 1:length(model_list)) {
posterior_model <- NULL
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_scaled[[j]],
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 2000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model
}
posteriors_all[[j]] <- posteriors_lang
}
head(posteriors_all[[1]])
hposteriors_all[[1]]
posteriors_all[[2]]
posteriors_combined <- vector("list", length = length(model_list))
for (i in 1:length(model_list)) {
posterior_model <- NULL
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_combined,
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 2000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_combined[[i]] <- posterior_model
}
#Isolateed predictors
model_semPAT <-  paste(helper, sem_PAT, optimize, sep = '\n')
model_semPAC <-  paste(helper, sem_PAC, optimize, sep = '\n')
model_phonoPAT <-  paste(helper, phono_PAT, optimize, sep = '\n')
model_phonoPAC <-  paste(helper, phono_PAC, optimize, sep = '\n')
#Combined predictors
model_semPAC_semPAT <-  paste(helper, semPAC_semPAT, optimize, sep = '\n')
model_phonoPAC_phonoPAT <-  paste(helper, phonoPAC_phonoPAT, optimize, sep = '\n')
model_semPAC_phonoPAC <-  paste(helper, semPAC_phonoPAC, optimize, sep = '\n')
model_semPAT_phonoPAT <-  paste(helper, semPAT_phonoPAT, optimize, sep = '\n')
model_semPAT_phonoPAC <-  paste(helper, semPAT_phonoPAC, optimize, sep = '\n')
model_semPAC_phonoPAT <-  paste(helper, semPAC_phonoPAT, optimize, sep = '\n')
model_semPAC_phonoPAC_semPAT_phonoPAT <-  paste(helper, semPAC_phonoPAC_semPAT_phonoPAT, optimize, sep = '\n')
#Make a list of theses models
model_list = list(model_semPAT, model_semPAC#, model_phonoPAT, model_phonoPAC,
#model_semPAC_phonoPAC_semPAT_phonoPAT
#model_semPAC_semPAT,
#model_phonoPAC_phonoPAT,
#model_semPAC_phonoPAC,
#model_semPAT_phonoPAT,
#model_semPAT_phonoPAC,
#model_semPAC_phonoPAT
)
model_dict = data.frame(model_index=seq(1, length(model_list)),
model_name=c('semPAT', 'semPAC'#, 'phonoPAT', 'phonoPAC',
#'model_semPAC_phonoPAC_semPAT_phonoPAT'
#'model_semPAC_semPAT',
#'model_phonoPAC_phonoPAT',
#'model_semPAC_phonoPAC',
#'model_semPAT_phonoPAT',
#'model_semPAT_phonoPAC',
#'model_semPAC_phonoPAT'
))
#Isolateed predictors
model_semPAT <-  paste(helper, sem_PAT, optimize, sep = '\n')
model_semPAC <-  paste(helper, sem_PAC, optimize, sep = '\n')
model_phonoPAT <-  paste(helper, phono_PAT, optimize, sep = '\n')
model_phonoPAC <-  paste(helper, phono_PAC, optimize, sep = '\n')
#Combined predictors
model_semPAC_semPAT <-  paste(helper, semPAC_semPAT, optimize, sep = '\n')
model_phonoPAC_phonoPAT <-  paste(helper, phonoPAC_phonoPAT, optimize, sep = '\n')
model_semPAC_phonoPAC <-  paste(helper, semPAC_phonoPAC, optimize, sep = '\n')
model_semPAT_phonoPAT <-  paste(helper, semPAT_phonoPAT, optimize, sep = '\n')
model_semPAT_phonoPAC <-  paste(helper, semPAT_phonoPAC, optimize, sep = '\n')
model_semPAC_phonoPAT <-  paste(helper, semPAC_phonoPAT, optimize, sep = '\n')
model_semPAC_phonoPAC_semPAT_phonoPAT <-  paste(helper, semPAC_phonoPAC_semPAT_phonoPAT, optimize, sep = '\n')
#Make a list of theses models
model_list = list(model_semPAT#, model_semPAC#, model_phonoPAT, model_phonoPAC,
#model_semPAC_phonoPAC_semPAT_phonoPAT
#model_semPAC_semPAT,
#model_phonoPAC_phonoPAT,
#model_semPAC_phonoPAC,
#model_semPAT_phonoPAT,
#model_semPAT_phonoPAC,
#model_semPAC_phonoPAT
)
model_dict = data.frame(model_index=seq(1, length(model_list)),
model_name=c('semPAT'#, 'semPAC'#, 'phonoPAT', 'phonoPAC',
#'model_semPAC_phonoPAC_semPAT_phonoPAT'
#'model_semPAC_semPAT',
#'model_phonoPAC_phonoPAT',
#'model_semPAC_phonoPAC',
#'model_semPAT_phonoPAT',
#'model_semPAT_phonoPAC',
#'model_semPAC_phonoPAT'
))
model_dict
posteriors_all <- vector("list", length = length(data_scaled))
for (j in 1:length(data_scaled)) {
posteriors_lang <- vector("list", length = length(model_list))
for (i in 1:length(model_list)) {
posterior_model <- NULL
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_scaled[[j]],
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 2000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model
}
posteriors_all[[j]] <- posteriors_lang
}
#feather::write_feather(posteriors_all, "saved_data/posterior.feather")
parameters_all = data.frame()
for (j in 1:length(posteriors_all)) {
parameters_lang = data.frame()
for (i in 1:length(posteriors_all[[j]])) {
param <- posteriors_all[[j]][[i]] %>%
select(starts_with("value.parameters")) %>%
gather(alpha, value, value.parameters.alpha1:value.parameters.alpha4) %>%
mutate(alpha = gsub("value.parameters.", "", alpha)) %>%
mutate(model_index = i) #%>%
#left_join(model_dict)
parameters_lang <- bind_rows(parameters_lang, param)
}
parameters_lang <- parameters_lang %>%
mutate(language = j )
parameters_all <- bind_rows(parameters_all, parameters_lang)
}
parameters_all <- parameters_all %>%
left_join(model_dict) %>%
left_join(language_dict) %>%
select(-model_index, -language) %>%
rename(language = language_name,
model = model_name)
parameters_sum <- parameters_all %>%
group_by(language, model, alpha) %>%
summarise(mean = mean(value),
median = median(value),
quantile_lower = quantile(value, c(0.025, 0.975))["2.5%"],
quantile_upper = quantile(value, c(0.025, 0.975))["97.5%"],
hdi_lower = hdi(value)['lower'],
hdi_upper = hdi(value)['upper']
)
post_combined <- parameters_sum %>%
filter(model == "model_semPAC_phonoPAC_semPAT_phonoPAT") %>%
select(-model)
post_combined$alpha <- mapvalues(post_combined$alpha,
from = c("alpha1", "alpha2","alpha3","alpha4"),
to = c("semPAC", "phonoPAC", "semPAT", "phonoPAT"))
post_combined$alpha <- factor(post_combined$alpha, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
post_individual <- parameters_sum %>%
filter(model != "model_semPAC_phonoPAC_semPAT_phonoPAT",
alpha == "alpha1")
post_individual$model <- factor(post_individual$model, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
ggplot(post_individual, aes(x = model , y = mean)) +
geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = model))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
ggplot(post_combined, aes(x = alpha, y = mean)) +
geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = alpha))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
post_combined <- parameters_all %>%
filter(model == "model_semPAC_phonoPAC_semPAT_phonoPAT") %>%
select(-model)
post_combined$alpha <- mapvalues(post_combined$alpha,
from = c("alpha1", "alpha2","alpha3","alpha4"),
to = c("semPAC", "phonoPAC", "semPAT", "phonoPAT"))
post_combined$alpha <- factor(post_combined$alpha, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
post_individual <- parameters_all %>%
filter(model != "model_semPAC_phonoPAC_semPAT_phonoPAT",
alpha == "alpha1")
post_individual$model <- factor(post_individual$model, levels = c("semPAC", "phonoPAC","semPAT", "phonoPAT"))
ggplot(post_individual, aes(x = model, y = value)) +
geom_violin()+
#geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = model))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
ggplot(post_combined, aes(x = alpha, y = value)) +
geom_violin()+
#geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, y = mean, col = alpha))+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
facet_wrap(~language, ncol=4)  +
theme(aspect.ratio = 0.7)
#Isolateed predictors
model_semPAT <-  paste(helper, sem_PAT, optimize, sep = '\n')
model_semPAC <-  paste(helper, sem_PAC, optimize, sep = '\n')
model_phonoPAT <-  paste(helper, phono_PAT, optimize, sep = '\n')
model_phonoPAC <-  paste(helper, phono_PAC, optimize, sep = '\n')
#Combined predictors
model_semPAC_semPAT <-  paste(helper, semPAC_semPAT, optimize, sep = '\n')
model_phonoPAC_phonoPAT <-  paste(helper, phonoPAC_phonoPAT, optimize, sep = '\n')
model_semPAC_phonoPAC <-  paste(helper, semPAC_phonoPAC, optimize, sep = '\n')
model_semPAT_phonoPAT <-  paste(helper, semPAT_phonoPAT, optimize, sep = '\n')
model_semPAT_phonoPAC <-  paste(helper, semPAT_phonoPAC, optimize, sep = '\n')
model_semPAC_phonoPAT <-  paste(helper, semPAC_phonoPAT, optimize, sep = '\n')
model_semPAC_phonoPAC_semPAT_phonoPAT <-  paste(helper, semPAC_phonoPAC_semPAT_phonoPAT, optimize, sep = '\n')
#Make a list of theses models
model_list = list(model_semPAT, model_semPAC, model_phonoPAT, model_phonoPAC,
model_semPAC_phonoPAC_semPAT_phonoPAT
#model_semPAC_semPAT,
#model_phonoPAC_phonoPAT,
#model_semPAC_phonoPAC,
#model_semPAT_phonoPAT,
#model_semPAT_phonoPAC,
#model_semPAC_phonoPAT
)
model_dict = data.frame(model_index=seq(1, length(model_list)),
model_name=c('semPAT', 'semPAC', 'phonoPAT', 'phonoPAC',
'model_semPAC_phonoPAC_semPAT_phonoPAT'
#'model_semPAC_semPAT',
#'model_phonoPAC_phonoPAT',
#'model_semPAC_phonoPAC',
#'model_semPAT_phonoPAT',
#'model_semPAT_phonoPAC',
#'model_semPAC_phonoPAT'
))
length(model_list)
length(model_list)
model_list
5+4
posteriors_all <- vector("list", length = length(data_scaled))
for (j in 1:length(data_scaled)) {
posteriors_lang <- vector("list", length = length(model_list))
for (i in 1:length(model_list)) {
posterior_model <- NULL
while (typeof(posterior_model)=="NULL") {
posterior_model <- webppl(model_list[[i]],
data = data_scaled[[j]],
data_var = "data",
inference_opts = list(
method = "MCMC",
samples = 2000,
burn = 500),
model_var = "AOA",
output_format = "webppl")
}
posteriors_lang[[i]] <- posterior_model
}
posteriors_all[[j]] <- posteriors_lang
}
4+5
hi <- 4+5
hi
hi
