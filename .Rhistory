geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
facet_wrap( ~ language, ncol=5) +
guides(colour=FALSE, linetype = guide_legend(override.aes = list(size=0.3)))+
scale_colour_solarized() +
theme_few()+
theme(aspect.ratio = 0.7) + #,+
#axis.text.x = element_text(size=7.5, angle=45)) +
scale_y_continuous(breaks =c(0,0.2))  +
#scale_y_discrete(breaks =NULL)
ylab("Estimate") +xlab("Mechanism")
plot_static_preds
library(papaja)
library(readr)
library(tidyr)
library(ggplot2)
library(cowplot)
library(knitr)
library(boot)
library(dplyr)
library(langcog)
library(ggthemes)
library(broom)
library(HDInterval)
#library("knitcitations")
#cleanbib()
#options("citation_format" = "pandoc")
knitr::include_graphics("figs/growth2.png")
statistics <- feather::read_feather("../saved_data/statistics.feather")
rownames(statistics) <- NULL
tab <- xtable::xtable(statistics,
caption = "\\label{tab:stats}Total number of nouns produced by toddlers in the CDI (left). We included in our study the subset of these nouns that had available English translations (middle). The final set consisted of nouns that had both available translations as well entries in the Free Association Norms (right).")
print(tab, type="latex", comment = F, table.placement = "H")
#print(statistics, type="latex", comment = F, table.placement = "H")
library(broom)
library(purrr)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(wordbankr)
library(stringr)
library(feather)
library(lme4)
library(boot)
library(langcog)
library(ggthemes)
library(nlme)
library(rwebppl)
library(jsonlite)
library(Hmisc)
library(poweRlaw)
library(HDInterval)
#Load helper functions
source(paste(getwd(),"/helper_functions/all_helper.r",sep = ""), chdir = T)
#Load probabilsitic models
source(paste(getwd(),"/models/all_models.r",sep = ""), chdir = T)
languages = c("Croatian","Danish","English (American)", "French (Quebecois)", "Italian", "Norwegian", "Russian", "Spanish (Mexican)", "Swedish", "Turkish")
admins <- get_administration_data() %>%
select(data_id, age, language, form) %>%
filter(language %in% languages)
items <- get_item_data() %>%
filter(type == "word", lexical_class == "nouns") %>%
filter(language %in% languages)
items_by_inst <- split(items, paste(items$language, items$form, sep = "_"))
get_inst_data <- function(inst_items) {
inst_lang <- unique(inst_items$language)
inst_form <- unique(inst_items$form)
inst_admins <- filter(admins, language == inst_lang, form == inst_form)
get_instrument_data(language = inst_lang ,
form = inst_form,
administrations = inst_admins,
items = inst_items$item_id,
iteminfo = inst_items
) %>%
filter(!is.na(age)) %>%
mutate(produces = !is.na(value) & value == "produces",
understands = !is.na(value) & (value == "understands" | value == "produces")) %>%
select(-value) %>%
gather(measure, value, produces, understands) %>%
filter((measure == "understands" & form == "WG") | (measure == "produces" & form == "WS") ) %>%
mutate(language = inst_lang,
form = inst_form)
}
data_raw <- map(items_by_inst, get_inst_data)
data_all <- bind_rows(data_raw) %>%
rename(item = num_item_id) %>%
group_by(language, form, measure,
lexical_category, lexical_class, uni_lemma,  item, definition,
age) %>%
summarise(num_true = sum(value, na.rm = TRUE),
num_false = n() - num_true,
prop = mean(value, na.rm = TRUE))
#feather::write_feather(data_all, "saved_data/data_all.feather")
#I am taking out measure to keep only produce
data_all <- feather::read_feather("saved_data/all_data.feather")
data_all$language <- plyr::mapvalues(data_all$language,
from = c("Croatian","Danish","English (American)", "French (Quebecois)", "Italian", "Norwegian", "Russian", "Spanish (Mexican)", "Swedish", "Turkish"),
to = c("Croatian","Danish","English", "French", "Italian", "Norwegian", "Russian", "Spanish", "Swedish", "Turkish"))
fit_inst_measure_uni <- function(inst_measure_uni_data) {
ages <- min(inst_measure_uni_data$age):max(inst_measure_uni_data$age)
model <- glm(cbind(num_true, num_false) ~ age, family = "binomial",
data = inst_measure_uni_data)
fit <- predict(model, newdata = data.frame(age = ages), se.fit = TRUE)
aoa <- -model$coefficients[["(Intercept)"]] / model$coefficients[["age"]]
constants <- inst_measure_uni_data %>%
ungroup()%>%
select(language, form, measure, lexical_category, lexical_class, uni_lemma, item, definition) %>%
distinct()
props <- inst_measure_uni_data %>%
ungroup() %>%
select(age, prop)
data.frame(age = ages,
fit_prop = inv.logit(fit$fit),
fit_se = fit$se.fit,
aoa = aoa, language = constants$language,
form = constants$form,
measure = constants$measure,
uni_lemma = constants$uni_lemma,
item = constants$item,
definition = constants$definition) %>%
left_join(props)
}
list_by_item <- data_all %>%
# make this filtering at the beginning, not here
split(paste(.$language, .$form, .$measure, .$item))
data_aoa <- map(list_by_item, fit_inst_measure_uni) %>%
bind_rows()
data_aoa <- data_aoa %>%
select(language, form, measure, uni_lemma, item, definition, aoa) %>%
distinct()
#feather::write_feather(data_aoa, "saved_data/data_aoa.feather")
#I am taking out measure to keep only produce
#data_aoa2 <- feather::read_feather("saved_data/aoa_data.feather") %>%
#  rename(definition = defintion) %>%
#  select(language, form, measure, uni_lemma, item, definition, aoa) %>%
#  distinct()
head(data_all)
mysummary <- data_all %>%
group_by(language, measure) %>%
summarize (
min_age = min(age),
max_age = max(age)) %>%
mutate(age_range = paste(min_age, max_age, sep = "-"))
mysummary <- data_all %>%
group_by(language, measure) %>%
summarise(min_age = min(age),
max_age = max(age)) %>%
mutate(age_range = paste(min_age, max_age, sep = "-"))
head(mysummary)
head(data_aoa)
mysummary <- data_all %>%
group_by(language, measure) %>%
summarise(min_age = min(age),
max_age = max(age)) %>%
mutate(age_range = paste(min_age, max_age, sep = "-")) %>%
select(-min_age, -max_age)
head(mysummary)
head(data_all)
mysummary <- data_all %>%
group_by(language, measure) %>%
summarise(min_age = min(age),
max_age = max(age),
nouns = n_distinct(item)) %>%
mutate(age_range = paste(min_age, max_age, sep = "-")) %>%
select(-min_age, -max_age)
head(mysummary)
mysummary
mysummary <- data_all %>%
group_by(language, measure) %>%
summarise(min_age = min(age),
max_age = max(age),
nouns = n_distinct(item)) %>%
mutate(age_range = paste(min_age, max_age, sep = "-")) %>%
select(-min_age, -max_age)  %>%
group_by(language, measure)
nest() %>%
spread(measure, data) %>%
unnest(.sep = "_")
mysummary <- data_all %>%
group_by(language, measure) %>%
summarise(min_age = min(age),
max_age = max(age),
nouns = n_distinct(item)) %>%
mutate(age_range = paste(min_age, max_age, sep = "-")) %>%
select(-min_age, -max_age)  %>%
group_by(language, measure) %>%
nest() %>%
spread(measure, data) %>%
unnest(.sep = "_")
head(mysummary)
mysummary <- data_all %>%
group_by(language, measure) %>%
summarise(min_age = min(age),
max_age = max(age),
nouns = n_distinct(item)) %>%
mutate(age_range = paste(min_age, max_age, sep = "-")) %>%
select(-min_age, -max_age)  %>%
group_by(language, measure) %>%
nest() %>%
spread(measure, data) %>%
unnest(.sep = "_") %>%
select(language, un = understands_nouns, ua=understands_age_range,
pn = produces_nouns, pa=produces_age_range)
head(mysummary)
kable(mysummary, format = "latex", escape = FALSE, booktabs = TRUE,
linesep = "", format.args = list(big.mark = ","),
caption = "Statistics for data from Wordbank.",
col.names = c("Language",  "Nouns", "Ages", "Nouns", "Ages")) %>%
add_header_above(c("", "Comprehension" = 2, "Production" = 2)) %>%
column_spec(1, bold = TRUE) %>%
kable_styling(position = "center")
install.packages("kableExtra")
library(kableExtra)
version
install.packages("knitr")
library(kableExtra)
kable(mysummary, format = "latex", escape = FALSE, booktabs = TRUE,
linesep = "", format.args = list(big.mark = ","),
caption = "Statistics for data from Wordbank.",
col.names = c("Language",  "Nouns", "Ages", "Nouns", "Ages")) %>%
add_header_above(c("", "Comprehension" = 2, "Production" = 2)) %>%
column_spec(1, bold = TRUE) %>%
kable_styling(position = "center")
kable(mysummary, format = "latex", escape = FALSE, booktabs = TRUE,
linesep = "", format.args = list(big.mark = ","),
caption = "Statistics for data from Wordbank.",
col.names = c("Language",  "Nouns", "Ages", "Nouns", "Ages")) %>%
add_header_above(c("", "Comprehension" = 2, "Production" = 2)) %>%
column_spec(1, bold = TRUE) %>%
kable_styling(position = "center")
install.packages("kableExtra")
library(kableExtra)
install.packages('knitr', repos = c('http://rforge.net', 'http://cran.rstudio.org'),
type = 'source')
library(kableExtra)
library(devtools)
install.packages('devtools')
install.packages('tables')
library(tables)
tabular( (Species + 1) ~ (n=1) + Format(digits=2)*+ (Sepal.Length + Sepal.Width)*(mean + sd), data=iris )
tabular( (Species + 1) ~ (n=1) + Format(digits=2)*
+ (Sepal.Length + Sepal.Width)*(mean + sd), data=iris)
head(iris)
tabular( (Species + 1) ~ (n=1) + Format(digits=2)*
+          (Sepal.Length + Sepal.Width)*(mean + sd), data=iris )
install_github('andreacirilloac/updateR')
library(devtools)
install_github('andreacirilloac/updateR')
.rs.restartR()
library(kableExtra)
head(data_all)
mysummary
kable(mysummary, format = "latex", escape = FALSE, booktabs = TRUE,
linesep = "", format.args = list(big.mark = ","),
caption = "Statistics for data from Wordbank.",
col.names = c("Language",  "Nouns", "Ages", "Nouns", "Ages")) %>%
add_header_above(c("", "Comprehension" = 2, "Production" = 2)) %>%
column_spec(1, bold = TRUE) %>%
kable_styling(position = "center")
feather::write_feather(mysummary, "saved_data/stats_new.feather")
statistics <- feather::read_feather("../saved_data/stats_new.feather")
#rownames(statistics) <- NULL
kable(mysummary, format = "latex", escape = FALSE, booktabs = TRUE,
linesep = "", format.args = list(big.mark = ","),
caption = "Statistics for data from Wordbank.",
col.names = c("Language",  "Nouns", "Ages", "Nouns", "Ages")) %>%
add_header_above(c("", "Comprehension" = 2, "Production" = 2)) %>%
column_spec(1, bold = TRUE) %>%
kable_styling(position = "center")
#print(statistics, type="latex", comment = F, table.placement = "H")
head(data_aoa)
data_growth <- feather::read_feather("saved_data/data_growth.feather")
head(data_growth)
sem_red <- feather::read_feather("saved_data/sem_red.feather")
phono_red <- feather::read_feather("saved_data/phono_red.feather")
#Combine data
data_growth_net <- words_growth %>%
left_join(sem_red) %>%
left_join(phono_red)
library(broom)
library(purrr)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(wordbankr)
library(stringr)
library(feather)
library(lme4)
library(boot)
library(langcog)
library(ggthemes)
library(nlme)
library(rwebppl)
library(jsonlite)
library(Hmisc)
library(poweRlaw)
library(HDInterval)
library(kableExtra)
#feather::write_feather(phono_red, "saved_data/phono_red.feather")
phono_red <- feather::read_feather("saved_data/phono_red.feather")
#Combine data
data_growth_net <- words_growth %>%
left_join(sem_red) %>%
left_join(phono_red)
data_all <- feather::read_feather("../saved_data/data_static_scaled.feather")
data_long <- data_all %>%
rename(Sem = sem_deg, Phono=phono_deg) %>%
gather(predictor, value, Sem:frequency) %>%
dplyr::filter(predictor == "Sem" | predictor == "Phono")
correlations <- data_long %>%
group_by(measure, language, predictor) %>%
summarise(cor = round(cor(aoa, value), 2))
head(correlations)
corrAve <- correlations %>%
group_by(measure, language, predictor) %>%
summarise(ave = mean(cor),
sd = sd(cor))
corrAve <- correlations %>%
group_by(measure, predictor) %>%
summarise(ave = mean(cor),
sd = sd(cor))
corrAve
prodPhono=corrAve$ave[which(corrAve$measure == "produces" & orrAve$predictor == "Phono")]
prodPhono=corrAve$ave[which(corrAve$measure == "produces" & corrAve$predictor == "Phono")]
prodPhono
pp_ave=corrAve$ave[which(corrAve$measure == "produces" & corrAve$predictor == "Phono")]
ps_ave=corrAve$ave[which(corrAve$measure == "produces" & corrAve$predictor == "Sem")]
cp_ave=corrAve$ave[which(corrAve$measure == "understands" & corrAve$predictor == "Phono")]
cs_ave=corrAve$ave[which(corrAve$measure == "understands" & corrAve$predictor == "Sem")]
#Sd of the ave
pp_sd=corrAve$sd[which(corrAve$measure == "produces" & corrAve$predictor == "Phono")]
ps_sd=corrAve$sd[which(corrAve$measure == "produces" & corrAve$predictor == "Sem")]
cp_sd=corrAve$sd[which(corrAve$measure == "understands" & corrAve$predictor == "Phono")]
cs_sd=corrAve$sd[which(corrAve$measure == "understands" & corrAve$predictor == "Sem")]
pp_ave
powerL <- feather::read_feather("../saved_data/degree_test.feather") %>%
rename(Kmin = xMin) %>%
rename(pValue = pVal)
powerProd <- powerL %>%
dplyr::filter(measure == 'produces') %>%
select(-measure)
powerComp <- powerL %>%
dplyr::filter(measure == 'understands') %>%
select(-measure)
head(powerL)
powerProd <- powerL %>%
dplyr::filter(measure == 'produces') %>%
select(-measure)
head(powerProd)
powerProd <- powerL %>%
dplyr::filter(measure == 'produces') %>%
select(-measure) %>%
group_by(language, dimension) %>%
nest() %>%
spread(dimension, data) %>%
unnest(.sep = "_")
head(powerProd)
head(powerL)
powerL <- feather::read_feather("../saved_data/degree_test.feather") %>%
rename(Kmin = xMin) %>%
rename(pValue = pVal) %>%
rename(domain = dimension)
head(powerL)
powerL <- feather::read_feather("../saved_data/degree_test.feather") %>%
rename(Kmin = xMin) %>%
rename(pValue = pVal) %>%
rename(domain = dimension) %>%
mutate(alpha_r = round(alpha(), digits = 2))
powerL <- feather::read_feather("../saved_data/degree_test.feather") %>%
rename(Kmin = xMin) %>%
rename(pValue = pVal) %>%
rename(domain = dimension) %>%
mutate(alpha_r = round(alpha, digits = 2))
headr(powerL)
head(powerL)
powerL <- feather::read_feather("../saved_data/degree_test.feather") %>%
rename(Kmin = xMin) %>%
rename(pValue = pVal) %>%
rename(domain = dimension) %>%
mutate(alpha_r = round(alpha, digits = 2),
pValue_r = round(pValue, digits = 2)) %>%
select(Kmin, domain, language, measure, alpha_r, pValue_r)
powerProd <- powerL %>%
dplyr::filter(measure == 'produces') %>%
select(-measure) %>%
group_by(language, domain) %>%
nest() %>%
spread(domain, data) %>%
unnest(.sep = "_")
head(powerProd)
powerL <- feather::read_feather("../saved_data/degree_test.feather") %>%
rename(Kmin = xMin) %>%
rename(pValue = pVal) %>%
rename(domain = dimension) %>%
mutate(alpha_r = round(alpha, digits = 2),
pValue_r = round(pValue, digits = 3)) %>%
select(Kmin, domain, language, measure, alpha_r, pValue_r)
powerProd <- powerL %>%
dplyr::filter(measure == 'produces') %>%
select(-measure) %>%
group_by(language, domain) %>%
nest() %>%
spread(domain, data) %>%
unnest(.sep = "_")
head(powerProd)
plot_grid(plot_correlation_prod , NULL, plot_correlation_comp , labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
degree_dist <- feather::read_feather("../saved_data/degree_dist.feather") %>%
mutate(data=ifelse(measure=='produces', 'Prod.', 'Comp.'))
plot_degree <- ggplot(data = degree_dist,  aes(x=x, y=y, col=dimension))+
facet_grid(data ~ language)+#, scales = "free") +
geom_point(#aes(colour = lexical_class),
#colour = solarized_palette(1),
size = 0.5, alpha = 0.5) +
scale_y_log10() + scale_x_log10() +
theme(aspect.ratio = 1) +
theme_few()+
theme(aspect.ratio = 0.7)+
xlab("Degree") +ylab("Prob.")
ggsave("figs/plot_degree.pdf", plot = plot_degree, width = 10, height = 3)
#knitr::include_graphics("figs/plot_degree.pdf")
plot_degree
#knitr::include_graphics("figs/plot_degree.pdf")
plot_degree
#knitr::include_graphics("figs/plot_degree.pdf")
plot_degree
#knitr::include_graphics("figs/plot_degree.pdf")
plot_degree
#knitr::include_graphics("figs/plot_degree.pdf")
plot_degree
#knitr::include_graphics("figs/plot_degree.pdf")
plot_degree
plot_grid(plot_correlation_prod , NULL, plot_correlation_comp , labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.05, 1.3))
plot_grid(plot_correlation_prod , NULL, plot_correlation_comp , labels = c("Production", "", "Comprehension"), ncol = 1, align = "v", rel_heights = c(1.3, 0.05, 1.3))
plot_grid(plot_correlation_prod , NULL, plot_correlation_comp , labels = c("Production", "", "Comprehension"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
plot_grid(plot_correlation_prod , NULL, plot_correlation_comp , labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
plot_grid(plot_correlation_prod , NULL, plot_correlation_comp , labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
plot_grid(plot_correlation_prod , NULL, plot_correlation_comp , labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
plot_grid(plot_correlation_prod , NULL, plot_correlation_comp , labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
##Test
growth_preds <- feather::read_feather("../saved_data/growth_preds.feather")
growth_preds$model <- plyr::mapvalues(growth_preds$model,
from = c("semPAC","semPAT","phonoPAC", "phonoPAT"),
to = c("semEXT","semINT","phonoEXT", "phonoINT"))
growth_preds$measure <- plyr::mapvalues(growth_preds$measure,
from = c("produces","understands"),
to = c("production","comprehension"))
plot_growth_preds <- ggplot(subset(growth_preds, Test=='Individual'), aes(x = model , y = mean)) +
geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, col = model, linetype=measure),
#geom_pointrange(aes(ymin = hdi_lower, ymax = hdi_upper, col = model),
position = position_dodge(width = .5),
size = 0.5,
fatten = 0.5)+
geom_hline(yintercept = 0, color = "grey", linetype = "dashed")+
coord_flip() +
facet_wrap( ~ language, ncol=5) +
guides(colour=FALSE, linetype = guide_legend(override.aes = list(size=0.3)))+
scale_colour_solarized() +
theme_few()+
theme(aspect.ratio = 0.7) + #,+
#axis.text.x = element_text(size=7.5, angle=45)) +
scale_y_continuous(breaks =c(0,0.2))  +
#scale_y_discrete(breaks =NULL)
ylab("Estimate") +xlab("Mechanism")
#plot_growth_preds
#legend <- get_legend(plot_growth_preds_prod)
#plot_noLegend <- plot_grid(plot_growth_preds_prod + theme(legend.position="none"), NULL, plot_growth_preds_comp + theme(legend.position="none"), labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
#plot_grid(plot_noLegend, legend, rel_widths = c(2, .2))
#plot_noLegend <- plot_grid(plot_growth_preds_prod, NULL, plot_growth_preds_comp , labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
#plot_grid(plot_noLegend)
#knitr::include_graphics("figs/plot_growth_preds_prod.pdf")
plot_growth_preds
#legend <- get_legend(plot_growth_preds_prod)
#plot_noLegend <- plot_grid(plot_growth_preds_prod + theme(legend.position="none"), NULL, plot_growth_preds_comp + theme(legend.position="none"), labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
#plot_grid(plot_noLegend, legend, rel_widths = c(2, .2))
#plot_noLegend <- plot_grid(plot_growth_preds_prod, NULL, plot_growth_preds_comp , labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
#plot_grid(plot_noLegend)
#knitr::include_graphics("figs/plot_growth_preds_prod.pdf")
plot_growth_preds
#legend <- get_legend(plot_growth_preds_prod)
#plot_noLegend <- plot_grid(plot_growth_preds_prod + theme(legend.position="none"), NULL, plot_growth_preds_comp + theme(legend.position="none"), labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
#plot_grid(plot_noLegend, legend, rel_widths = c(2, .2))
#plot_noLegend <- plot_grid(plot_growth_preds_prod, NULL, plot_growth_preds_comp , labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
#plot_grid(plot_noLegend)
#knitr::include_graphics("figs/plot_growth_preds_prod.pdf")
plot_growth_preds
#legend <- get_legend(plot_static_preds_prod)
#plot_noLegend <- plot_grid(plot_static_preds_prod + theme(legend.position="none"), NULL, plot_static_preds_comp + theme(legend.position="none"), labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
#plot_grid(plot_noLegend, legend, rel_widths = c(2, .2))
#plot_noLegend <- plot_grid(plot_static_preds_prod, NULL, plot_static_preds_comp , labels = c("A", "", "B"), ncol = 1, align = "v", rel_heights = c(1.3, 0.1, 1.3))
#plot_grid(plot_noLegend)
plot_static_preds
plot_static_preds_all
knitr::include_graphics("figs/growth3.png")
knitr::include_graphics("figs/growth3.png")
head(items)
distinct(items, language)
items <- get_item_data()
distinct(items, language)
head(items)
View(distinct(items, language))
head(items %>% filter(languae=="Cantonese"))
head(items %>% filter(language=="Cantonese"))
head(items %>% filter(language=="Mandarin (Beijing)"))
head(items %>% filter(language=="Hebrew"))
head(items %>% filter(language=="British Sign Language"))
head(items %>% filter(language=="American Sign Language"))
head(items %>% filter(language=="Greek (Cypriot)"))
head(items %>% filter(language=="Kigiriama"))
head(items %>% filter(language=="Kiswahili"))
head(items %>% filter(language=="Korean"))
